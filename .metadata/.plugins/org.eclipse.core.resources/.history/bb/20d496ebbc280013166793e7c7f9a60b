package com.visa.json.parser;

import java.io.IOException;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.log4j.Logger;
import org.json.simple.parser.ContainerFactory;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

public class IOCSimpleMapper extends Mapper<LongWritable, Text, Text, Text> {
	
	private static final char DELIM = '|';
	private static final String START_OBJ = "{";
	private static final String END_OBJ = "}";
	private static final String MARK = "<<<<<<<<<<<==============";
	
	private static StringBuilder jsonObject = new StringBuilder();
	// private static StringBuilder parsed = new StringBuilder();
	private static int braceLevel = 0;
	private JSONParser parser = new JSONParser();
	private final Logger log;
	private ContainerFactory cf = null;
	private StringBuilder parsed = null;
	
	public IOCSimpleMapper() {
		log = Logger.getLogger("mapred.audit.logger");
		parsed = new StringBuilder();
		
		cf = new ContainerFactory() {
			
			@Override
			public List<String> creatArrayContainer() {
				return new LinkedList<String>();
			}
			
			@Override
			public Map<String, String> createObjectContainer() {
				return new LinkedHashMap<String, String>();
			}
		};
		
	}
	
	@SuppressWarnings("rawtypes")
	@Override
	public void map(LongWritable key, Text value, Context context) {
		String inStr = value.toString();
		
		// First, try to parse the in value just as is, in case it's not
		// multi-line
		try {
			String tmp = parse(inStr);
			flush(tmp, context);
			clearStrBuilderj(jsonObject);
			return;
		}
		catch (ParseException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		braceLevel += StringUtils.countMatches(inStr, START_OBJ);
		jsonObject.append(inStr);
		braceLevel -= StringUtils.countMatches(inStr, END_OBJ);
		
		if (braceLevel == 0) {
			try {
				System.out.println(MARK + "  Creating parser");
				String parsedJson = parse(jsonObject.toString());
				context.write(null, new Text(parsedJson));
				clearJson();
			}
			catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				clearJson();
			}
			catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				clearJson();
			}
			catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				clearJson();
			}
		}
		else if (braceLevel < 0) {
			// Error in processing, partial file, etc.
			// clear the contents - bad data
			clearJson();;
			braceLevel = 0;
		}
		
	}
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	private String parse(String inStr) throws ParseException {
		boolean first = true;
		clearStrBuilderj(parsed);
		Map<String, String> map = (Map<String, String>) parser.parse(inStr);
		Iterator it = map.entrySet().iterator();
		
		while (it.hasNext()) {
			Map.Entry entry = (Map.Entry) it.next();
			String value = entry.getValue().toString();
			if (first) {
				first = false;
			}
			else {
				parsed.append(DELIM);
			}
			parsed.append(value);
		}
		// clearStrBuilderj(parsed);
		if (parsed.charAt(parsed.length() - 1) == DELIM) {
			parsed.deleteCharAt(parsed.length() - 1);
		}
		return parsed.toString();
	}
	
	private void flush(String parsed, Context context) throws IOException, InterruptedException {
		context.write(new Text(parsed), null);
		
	}
	
	private void clearJson() {
		clearStrBuilderj(jsonObject);
	}
	
	private void clearStrBuilderj(StringBuilder toClear) {
		toClear.delete(0, toClear.length() - 1);
	}
}
